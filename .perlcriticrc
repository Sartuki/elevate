# -------------------------------------------------------
# Generated by build-tools/generate_perlcriticrc.pl
#   do not edit this file manually
# -------------------------------------------------------

severity = 4
verbose  = 5

# Use `List::MoreUtils::any' instead of `grep' in boolean context.
[BuiltinFunctions::ProhibitBooleanGrep]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Map blocks should have a single statement.
[BuiltinFunctions::ProhibitComplexMappings]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Use 4-argument `substr' instead of writing `substr($foo, 2, 6) = $bar'.
[BuiltinFunctions::ProhibitLvalueSubstr]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Forbid $b before $a in sort blocks.
[BuiltinFunctions::ProhibitReverseSortBlock]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Prohibit `\shift' in code
[BuiltinFunctions::ProhibitShiftRef]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Use Time::HiRes instead of something like `select(undef, undef, undef, .05)'.
[BuiltinFunctions::ProhibitSleepViaSelect]
# Downgraded severity. Default severity: 5.
# Not enforced by cPLint.
severity = 3

# Write `eval { my $foo; bar($foo) }' instead of `eval "my $foo; bar($foo);"'.
[BuiltinFunctions::ProhibitStringyEval]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# Write `split /-/, $string' instead of `split '-', $string'.
[BuiltinFunctions::ProhibitStringySplit]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Write `eval { $foo->can($name) }' instead of `UNIVERSAL::can($foo, $name)'.
[BuiltinFunctions::ProhibitUniversalCan]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `eval { $foo->isa($pkg) }' instead of `UNIVERSAL::isa($foo, $pkg)'.
[BuiltinFunctions::ProhibitUniversalIsa]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't pass $_ to built-in functions that assume it, or to most filetest operators.
[BuiltinFunctions::ProhibitUselessTopic]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't use `grep' in void contexts.
[BuiltinFunctions::ProhibitVoidGrep]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Don't use `map' in void contexts.
[BuiltinFunctions::ProhibitVoidMap]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Write `grep { /$pattern/ } @list' instead of `grep /$pattern/, @list'.
[-BuiltinFunctions::RequireBlockGrep]

# Write `map { /$pattern/ } @list' instead of `map /$pattern/, @list'.
[BuiltinFunctions::RequireBlockMap]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Use `glob q{*}' instead of <*>.
[BuiltinFunctions::RequireGlobFunction]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# Sort blocks should have a single statement.
[BuiltinFunctions::RequireSimpleSortBlock]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# AUTOLOAD methods should be avoided.
[ClassHierarchies::ProhibitAutoloading]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Employ `use base' instead of `@ISA'.
[ClassHierarchies::ProhibitExplicitISA]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `bless {}, $class;' instead of just `bless {};'.
[ClassHierarchies::ProhibitOneArgBless]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# keep a fat comma on the same line as its quoted word
[-CodeLayout::ProhibitFatCommaNewline]

# Use spaces instead of tabs.
[-CodeLayout::ProhibitHardTabs]

# don't put if after if on same line
[-CodeLayout::ProhibitIfIfSameLine]

# Write `open $handle, $path' instead of `open($handle, $path)'.
[-CodeLayout::ProhibitParensWithBuiltins]

# Write `qw(foo bar baz)' instead of `('foo', 'bar', 'baz')'.
[-CodeLayout::ProhibitQuotedWordLists]

# Don't use whitespace at the end of lines.
[-CodeLayout::ProhibitTrailingWhitespace]

# Use the same newline through the source.
[-CodeLayout::RequireConsistentNewlines]

# require a semicolon at the end of code blocks
[-CodeLayout::RequireFinalSemicolon]

# Must run code through perltidy.
[-CodeLayout::RequireTidyCode]

# comma at end of list at newline
[-CodeLayout::RequireTrailingCommaAtNewline]

# Put a comma at the end of every multi-line list declaration, including the last one.
[-CodeLayout::RequireTrailingCommas]

# Don't use & to call subroutines
[-Community::AmpersandSubCalls]

# Don't assign an anonymous arrayref to an array
[-Community::ArrayAssignAref]

# Don't use bareword filehandles other than built-ins
[-Community::BarewordFilehandles]

# Don't declare variables conditionally
[-Community::ConditionalDeclarations]

# Don't end a subroutine with a conditional block
[-Community::ConditionalImplicitReturn]

# Avoid features that have been deprecated or removed from Perl
[-Community::DeprecatedFeatures]

# Various modules discouraged from use
[-Community::DiscouragedModules]

# Don't use $a or $b as variable names outside sort
[-Community::DollarAB]

# Don't use each to iterate through a hash
[-Community::Each]

# Don't use return with no arguments
[-Community::EmptyReturn]

# Don't call methods indirectly
[-Community::IndirectObjectNotation]

# Don't use undeclared foreach loop iterators
[-Community::LexicalForeachIterator]

# Don't loop over hashes
[-Community::LoopOnHash]

# Don't use mod_perl to write web applications
[-Community::ModPerl]

# Don't use multidimensional array emulation
[-Community::MultidimensionalArrayEmulation]

# Always use the three-argument form of open
[Community::OpenArgs]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't use overload without specifying a bool overload and enabling fallback
[-Community::OverloadOptions]

# Don't use POSIX without specifying an import list
[-Community::POSIXImports]

# Module files should declare a package matching the filename
[-Community::PackageMatchesFilename]

# Various modules with preferred alternatives
[-Community::PreferredAlternatives]

# Don't use function prototypes
[Community::Prototypes]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4
signature_enablers = cPstrict Test::Cpanel::Policy

# Always use strict and warnings, or a module that imports these
[-Community::StrictWarnings]

# Interpreter-based threads are officially discouraged
[-Community::Threads]

# Don't write context-sensitive functions using wantarray
[Community::Wantarray]
# Upgraded severity. Default severity: 2.
# Enforced by cPLint.
severity = 4

# Scripts should not use the -w switch on the shebang line
[-Community::WarningsSwitch]

# Don't use while with implicit assignment to $_
[-Community::WhileDiamondDefaultAssignment]

# new enough "constant" module for leading underscores
[-Compatibility::ConstantLeadingUnderscore]

# new enough "constant" module for multiple constants
[-Compatibility::ConstantPragmaHash]

# new enough Gtk2 version for its constants
[-Compatibility::Gtk2Constants]

# explicit Perl version for features used
[-Compatibility::PerlMinimumVersionAndWhy]

# check Perl version declared against POD features used
[-Compatibility::PodMinimumVersion]

# don't use explicit /dev/null
[-Compatibility::ProhibitUnixDevNull]

# Provide Perl::Critic support for hunting down compile-time side effects
[-CompileTime]

# Write `for(0..20)' instead of `for($i=0; $i<=20; $i++)'.
[ControlStructures::ProhibitCStyleForLoops]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't write long "if-elsif-elsif-elsif-elsif...else" chains.
[ControlStructures::ProhibitCascadingIfElse]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't write deeply nested loops and conditionals.
[ControlStructures::ProhibitDeepNests]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't use labels that are the same as the special block names.
[ControlStructures::ProhibitLabelsWithSpecialBlockNames]
# Upgraded severity. Default severity: 4.
# Enforced by cPLint.
severity = 4

# Don't modify `$_' in list functions.
[ControlStructures::ProhibitMutatingListFunctions]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4

# Don't use operators like `not', `!~', and `le' within `until' and `unless'.
[ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `if($condition){ do_something() }' instead of `do_something() if $condition'.
[ControlStructures::ProhibitPostfixControls]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Write `if(! $condition)' instead of `unless($condition)'.
[ControlStructures::ProhibitUnlessBlocks]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't write code after an unconditional `die, exit, or next'.
[ControlStructures::ProhibitUnreachableCode]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Write `while(! $condition)' instead of `until($condition)'.
[ControlStructures::ProhibitUntilBlocks]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Never use `...' in production code.
[ControlStructures::ProhibitYadaOperator]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Provides a Perl::Critic policy to ensure proper Cpanel::Exception usage
[Cpanel::CpanelExceptions]
# Upgraded severity. Default severity: 4.
# Enforced by cPLint.
severity = 4

[Cpanel::CpanelOS]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Provides a Perl::Critic policy to report invalid multidimensional hash keys
[Cpanel::MultiDimensionalArrayEmulation]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Provides a Perl::Critic policy to report unapproved exits from subroutines
[Cpanel::NoExitsFromSubroutines]
# Default severity: 4.
# Enforced by cPlint
severity = 4
allowed_after = exec fork

# Provides a Perl::Critic policy to prohibit shell unsafe qx and `` operators along with their backing readpipe operator
[Cpanel::ProhibitQxAndBackticks]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Provides a Perl::Critic policy to ensure proper tr/// usage
[Cpanel::TransliterationUsage]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Provides a Perl::Critic policy to check for error-prone Try::Tiny usage.
[Cpanel::TryTinyUsage]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# consecutive L<> links
[-Documentation::ProhibitAdjacentLinks]

# don't use C<> markup in a NAME section
[-Documentation::ProhibitBadAproposMarkup]

# don't duplicate =head names
[-Documentation::ProhibitDuplicateHeadings]

# don't duplicate L<> links in SEE ALSO
[-Documentation::ProhibitDuplicateSeeAlso]

# don't L<> link to own POD
[-Documentation::ProhibitLinkToSelf]

# avoid comma at end of section
[-Documentation::ProhibitParagraphEndComma]

# don't end a paragraph with two dots
[-Documentation::ProhibitParagraphTwoDots]

# don't leave an open bracket or paren
[-Documentation::ProhibitUnbalancedParens]

# unexpanded C<> etc markup in POD verbatim paras
[-Documentation::ProhibitVerbatimMarkup]

# require __END__ before POD at end of file
[-Documentation::RequireEndBeforeLastPod]

# markup /foo filenames
[-Documentation::RequireFilenameMarkup]

# end POD with =cut directive
[-Documentation::RequireFinalCut]

# use L<> markup on URLs in POD
[-Documentation::RequireLinkedURLs]

# The `=head1 NAME' section should match the package.
[Documentation::RequirePackageMatchesPodName]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# All POD should be after `__END__'.
[Documentation::RequirePodAtEnd]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Organize your POD into the customary sections.
[Documentation::RequirePodSections]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Use functions from Carp instead of `warn' or `die'.
[ErrorHandling::RequireCarping]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# You can't depend upon the value of `$@'/`$EVAL_ERROR' to tell whether an `eval' failed.
[ErrorHandling::RequireCheckingReturnValueOfEval]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't use & to call subroutines
[-Freenode::AmpersandSubCalls]

# Don't assign an anonymous arrayref to an array
[-Freenode::ArrayAssignAref]

# Don't use bareword filehandles other than built-ins
[-Freenode::BarewordFilehandles]

# Don't declare variables conditionally
[-Freenode::ConditionalDeclarations]

# Don't end a subroutine with a conditional block
[-Freenode::ConditionalImplicitReturn]

# Avoid features that have been deprecated or removed from Perl
[-Freenode::DeprecatedFeatures]

# Various modules discouraged from use
[-Freenode::DiscouragedModules]

# Don't use $a or $b as variable names outside sort
[-Freenode::DollarAB]

# Don't use each to iterate through a hash
[-Freenode::Each]

# Don't use return with no arguments
[-Freenode::EmptyReturn]

# Don't call methods indirectly
[-Freenode::IndirectObjectNotation]

# Don't use undeclared foreach loop iterators
[-Freenode::LexicalForeachIterator]

# Don't loop over hashes
[-Freenode::LoopOnHash]

# Don't use mod_perl to write web applications
[-Freenode::ModPerl]

# Don't use multidimensional array emulation
[-Freenode::MultidimensionalArrayEmulation]

# Always use the three-argument form of open
[-Freenode::OpenArgs]

# Don't use overload without specifying a bool overload and enabling fallback
[-Freenode::OverloadOptions]

# Don't use POSIX without specifying an import list
[-Freenode::POSIXImports]

# Module files should declare a package matching the filename
[-Freenode::PackageMatchesFilename]

# Various modules with preferred alternatives
[-Freenode::PreferredAlternatives]

# Don't use function prototypes
[-Freenode::Prototypes]

# Always use strict and warnings, or a module that imports these
[-Freenode::StrictWarnings]

# Interpreter-based threads are officially discouraged
[-Freenode::Threads]

# Don't write context-sensitive functions using wantarray
[-Freenode::Wantarray]

# Scripts should not use the -w switch on the shebang line
[-Freenode::WarningsSwitch]

# Don't use while with implicit assignment to $_
[-Freenode::WhileDiamondDefaultAssignment]

# Discourage stuff like `@files = `ls $directory`'.
[InputOutput::ProhibitBacktickOperators]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `open my $fh, q{<}, $filename;' instead of `open FH, q{<}, $filename;'.
[InputOutput::ProhibitBarewordFileHandles]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4

# Use "<>" or "<ARGV>" or a prompting module instead of "<STDIN>".
[-InputOutput::ProhibitExplicitStdin]

# Use prompt() instead of -t.
[InputOutput::ProhibitInteractiveTest]
# Downgraded severity. Default severity: 5.
# Not enforced by cPLint.
severity = 3

# Use `local $/ = undef' or Path::Tiny instead of joined readline.
[InputOutput::ProhibitJoinedReadline]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Never write `select($fh)'.
[InputOutput::ProhibitOneArgSelect]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Write `while( $line = <> ){...}' instead of `for(<>){...}'.
[InputOutput::ProhibitReadlineInForLoop]
# Upgraded severity. Default severity: 4.
# Enforced by cPLint.
severity = 4

# Write `open $fh, q{<}, $filename;' instead of `open $fh, "<$filename";'.
[InputOutput::ProhibitTwoArgOpen]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4

# Write `print {$FH} $foo, $bar;' instead of `print $FH $foo, $bar;'.
[InputOutput::RequireBracedFileHandleWithPrint]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Close filehandles as soon as possible after opening them.
[-InputOutput::RequireBriefOpen]

# Write `my $error = close $fh;' instead of `close $fh;'.
[InputOutput::RequireCheckedClose]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Write `my $error = open $fh, $mode, $filename;' instead of `open $fh, $mode, $filename;'.
[InputOutput::RequireCheckedOpen]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Return value of flagged function ignored.
[InputOutput::RequireCheckedSyscalls]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Write `open $fh, q{<:encoding(UTF-8)}, $filename;' instead of `open $fh, q{<:utf8}, $filename;'.
[InputOutput::RequireEncodingWithUTF8Layer]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4

# Do not use `format'.
[Miscellanea::ProhibitFormats]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Do not use `tie'.
[Miscellanea::ProhibitTies]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Forbid a bare `## no critic'
[Miscellanea::ProhibitUnrestrictedNoCritic]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Remove ineffective "## no critic" annotations.
[Miscellanea::ProhibitUselessNoCritic]
# Upgraded severity. Default severity: 2.
# Enforced by cPLint.
severity = 4

# check placeholder names in Locale::TextDomain calls
[-Miscellanea::TextDomainPlaceholders]

# check for Locale::TextDomain imported but unused
[-Miscellanea::TextDomainUnused]

# Export symbols via `@EXPORT_OK' or `%EXPORT_TAGS' instead of `@EXPORT'.
[Modules::ProhibitAutomaticExportation]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Avoid putting conditional logic around compile-time includes.
[Modules::ProhibitConditionalUseStatements]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Ban modules that aren't blessed by your shop.
[Modules::ProhibitEvilModules]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# Minimize complexity in code that is outside of subroutines.
[-Modules::ProhibitExcessMainComplexity]

# don't put a #! line at the start of a module file
[-Modules::ProhibitModuleShebang]

# Put packages (especially subclasses) in separate files.
[-Modules::ProhibitMultiplePackages]

# don't import the whole of POSIX into a module
[-Modules::ProhibitPOSIXimport]

# avoid quoted version number string in a "use" statement
[-Modules::ProhibitUseQuotedVersion]

# Write `require Module' instead of `require 'Module.pm''.
[Modules::RequireBarewordIncludes]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# End each module with an explicitly `1;' instead of some funky expression.
[Modules::RequireEndWithOne]
# Downgraded severity. Default severity: 4.
# Not enforced by cPLint.
severity = 3

[-Modules::RequireExplicitInclusion]

# Always make the `package' explicit.
[Modules::RequireExplicitPackage]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Package declaration must match filename.
[Modules::RequireFilenameMatchesPackage]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# `use English' must be passed a `-no_match_vars' argument.
[Modules::RequireNoMatchVarsWithUseEnglish]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Give every module a `$VERSION' number.
[Modules::RequireVersionVar]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Distinguish different program components by case.
[NamingConventions::Capitalization]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Don't use vague variable or subroutine names like 'last' or 'record'.
[NamingConventions::ProhibitAmbiguousNames]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Prohibit indirect object call syntax.
[Objects::ProhibitIndirectSyntax]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Write `@{ $array_ref }' instead of `@$array_ref'.
[References::ProhibitDoubleSigils]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Capture variable used outside conditional.
[RegularExpressions::ProhibitCaptureWithoutTest]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Split long regexps into smaller `qr//' chunks.
[RegularExpressions::ProhibitComplexRegexes]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Use named character classes instead of explicit character lists.
[RegularExpressions::ProhibitEnumeratedClasses]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Use character classes for literal meta-characters instead of escapes.
[RegularExpressions::ProhibitEscapedMetacharacters]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Use `eq' or hash instead of fixed-pattern regexps.
[RegularExpressions::ProhibitFixedStringMatches]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Use `[abc]' instead of `a|b|c'.
[RegularExpressions::ProhibitSingleCharAlternation]
# Upgraded severity. Default severity: 1.
# Enforced by cPLint.
severity = 4

# Only use a capturing group if you plan to use the captured value.
[RegularExpressions::ProhibitUnusedCapture]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Use only `//' or `{}' to delimit regexps.
[RegularExpressions::ProhibitUnusualDelimiters]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Don't use $_ to match against regexes.
[RegularExpressions::ProhibitUselessTopic]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Use `{' and `}' to delimit multi-line regexps.
[RegularExpressions::RequireBracesForMultiline]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Always use the `/s' modifier with regular expressions.
[RegularExpressions::RequireDotMatchAnything]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Always use the `/x' modifier with regular expressions.
[RegularExpressions::RequireExtendedFormatting]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Always use the `/m' modifier with regular expressions.
[RegularExpressions::RequireLineBoundaryMatching]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't call functions with a leading ampersand sigil.
[Subroutines::ProhibitAmpersandSigils]
# Upgraded severity. Default severity: 2.
# Enforced by cPLint.
severity = 4

# Don't declare your own `open' function.
[Subroutines::ProhibitBuiltinHomonyms]
# Downgraded severity. Default severity: 4.
# Not enforced by cPLint.
severity = 3

[-Subroutines::ProhibitCallsToUndeclaredSubs]

[-Subroutines::ProhibitCallsToUnexportedSubs]

# Minimize complexity by factoring code into smaller subroutines.
[Subroutines::ProhibitExcessComplexity]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4
max_mccabe = 30

# Return failure with bare `return' instead of `return undef'.
[-Subroutines::ProhibitExplicitReturnUndef]

[-Subroutines::ProhibitExportingUndeclaredSubs]

# Too many arguments.
[Subroutines::ProhibitManyArgs]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4
skip_object = 1

# `sub never { sub correct {} }'.
[Subroutines::ProhibitNestedSubs]
# Default severity: 5.
# Enforced by cPlint
severity = 5

[Subroutines::ProhibitQualifiedSubDeclarations]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Behavior of `sort' is not defined if called in scalar context.
[Subroutines::ProhibitReturnSort]
# Default severity: 5.
# Enforced by cPlint
severity = 5

# Don't write `sub my_function (@@) {}'.
[-Subroutines::ProhibitSubroutinePrototypes]

# Prevent unused private subroutines.
[Subroutines::ProhibitUnusedPrivateSubroutines]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Prevent access to private subs in other packages.
[Subroutines::ProtectPrivateSubs]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Always unpack `@_' first.
[Subroutines::RequireArgUnpacking]
# Default severity: 4.
# Enforced by cPlint
severity = 4
short_subroutine_statements = 4

# End every path through a subroutine with an explicit `return' statement.
[Subroutines::RequireFinalReturn]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Prohibit various flavors of `no strict'.
[TestingAndDebugging::ProhibitNoStrict]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4
allow = refs

# Prohibit various flavors of `no warnings'.
[TestingAndDebugging::ProhibitNoWarnings]
# Default severity: 4.
# Enforced by cPlint
severity = 4
allow = once redefine numeric

# Don't turn off strict for large blocks of code.
[-TestingAndDebugging::ProhibitProlongedStrictureOverride]

# Tests should all have labels.
[TestingAndDebugging::RequireTestLabels]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Always `use strict'.
[TestingAndDebugging::RequireUseStrict]
# Upgraded severity. Default severity: 5.
# Enforced by cPLint.
severity = 4
equivalent_modules = cPstrict Test::Cpanel::Policy Moo Moose

# Always `use warnings'.
[TestingAndDebugging::RequireUseWarnings]
# Default severity: 4.
# Enforced by cPlint
severity = 4
equivalent_modules = cPstrict Test::Cpanel::Policy Moo Moose

# Ban next/last/return in Try::Tiny blocks
[TryTiny::ProhibitExitingSubroutine]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# disallow bareword before <
[-ValuesAndExpressions::ConstantBeforeLt]

# logical not used with compare
[-ValuesAndExpressions::NotWithCompare]

# don't assign an anonymous arrayref to an array
[-ValuesAndExpressions::ProhibitArrayAssignAref]

# don't use Foo:: style barewords
[-ValuesAndExpressions::ProhibitBarewordDoubleColon]

# Don't use the comma operator as a statement separator.
[ValuesAndExpressions::ProhibitCommaSeparatedStatements]
# Default severity: 4.
# Enforced by cPlint
severity = 4
allow_last_statement_to_be_comma_separated_in_map_and_grep = 1

# Prohibit version values from outside the module.
[ValuesAndExpressions::ProhibitComplexVersion]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't `use constant FOO => 15'.
[-ValuesAndExpressions::ProhibitConstantPragma]

# disallow duplicate literal hash keys
[-ValuesAndExpressions::ProhibitDuplicateHashKeys]

# disallow empty consecutive commas
[-ValuesAndExpressions::ProhibitEmptyCommas]

# Write `q{}' instead of `'''.
[ValuesAndExpressions::ProhibitEmptyQuotes]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Write `"\N{DELETE}"' instead of `"\x7F"', etc.
[ValuesAndExpressions::ProhibitEscapedCharacters]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# don't use the -f file test
[-ValuesAndExpressions::ProhibitFiletest_f]

# Use concatenation or HEREDOCs instead of literal line breaks in strings.
[ValuesAndExpressions::ProhibitImplicitNewlines]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Always use single quotes for literal strings.
[ValuesAndExpressions::ProhibitInterpolationOfLiterals]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Write `oct(755)' instead of `0755'.
[-ValuesAndExpressions::ProhibitLeadingZeros]

# Long chains of method calls indicate tightly coupled code.
[ValuesAndExpressions::ProhibitLongChainsOfMethodCalls]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't use values that don't explain themselves.
[ValuesAndExpressions::ProhibitMagicNumbers]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't mix numeric operators with string operands, or vice-versa.
[ValuesAndExpressions::ProhibitMismatchedOperators]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write ` !$foo && $bar || $baz ' instead of ` not $foo && $bar or $baz'.
[ValuesAndExpressions::ProhibitMixedBooleanOperators]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Use `q{}' or `qq{}' instead of quotes for awkward-looking strings.
[ValuesAndExpressions::ProhibitNoisyQuotes]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# disallow empty statements (stray semicolons)
[-ValuesAndExpressions::ProhibitNullStatements]

# Don't use quotes (`'', `"', ``') as delimiters for the quote-like operators.
[ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't write ` print <<'__END__' '.
[ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# don't use undefined backslash forms
[-ValuesAndExpressions::ProhibitUnknownBackslash]

# Don't use strings like `v1.4' or `1.4.5' when including other modules.
[ValuesAndExpressions::ProhibitVersionStrings]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Require $VERSION to be a constant rather than a computed value.
[ValuesAndExpressions::RequireConstantVersion]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Warns that you might have used single quotes when you really wanted double-quotes.
[ValuesAndExpressions::RequireInterpolationOfMetachars]
# Default severity: 1.
# Not enforced by cPlint
severity = 1

# Write ` 141_234_397.0145 ' instead of ` 141234397.0145 '.
[ValuesAndExpressions::RequireNumberSeparators]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# $VERSION a plain number
[-ValuesAndExpressions::RequireNumericVersion]

# Write ` print <<'THE_END' ' or ` print <<"THE_END" '.
[ValuesAndExpressions::RequireQuotedHeredocTerminator]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write ` <<'THE_END'; ' instead of ` <<'theEnd'; '.
[ValuesAndExpressions::RequireUpperCaseHeredocTerminator]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# specials like __PACKAGE__ used literally
[-ValuesAndExpressions::UnexpandedSpecialLiteral]

# Do not write ` my $foo .= 'bar'; '.
[Variables::ProhibitAugmentedAssignmentInDeclaration]
# Default severity: 4.
# Enforced by cPlint
severity = 4

# Do not write ` my $foo = $bar if $baz; '.
[Variables::ProhibitConditionalDeclarations]
# Downgraded severity. Default severity: 5.
# Not enforced by cPLint.
severity = 3

# Use `my' instead of `local', except when you have to.
[Variables::ProhibitLocalVars]
# Default severity: 2.
# Not enforced by cPlint
severity = 2

# Don't write loops on hashes, only on keys and values of hashes
[-Variables::ProhibitLoopOnHash]

# Avoid `$`', `$&', `$'' and their English equivalents.
[Variables::ProhibitMatchVars]
# Upgraded severity. Default severity: 4.
# Enforced by cPLint.
severity = 4

# Eliminate globals declared with `our' or `use vars'.
[Variables::ProhibitPackageVars]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Use double colon (::) to separate package name components instead of single quotes (').
[Variables::ProhibitPerl4PackageNames]
# Upgraded severity. Default severity: 2.
# Enforced by cPLint.
severity = 4

# Write `$EVAL_ERROR' instead of `$@'.
[-Variables::ProhibitPunctuationVars]

# Do not reuse a variable name in a lexical scope
[Variables::ProhibitReusedNames]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Don't ask for storage you don't need.
[Variables::ProhibitUnusedVariables]
# Upgraded severity. Default severity: 3.
# Enforced by cPLint.
severity = 4

# Prevent access to private vars in other packages.
[Variables::ProtectPrivateVars]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `local $foo = $bar;' instead of just `local $foo;'.
[Variables::RequireInitializationForLocalVars]
# Default severity: 3.
# Not enforced by cPlint
severity = 3

# Write `for my $element (@list) {...}' instead of `for $element (@list) {...}'.
[Variables::RequireLexicalLoopIterators]
# Downgraded severity. Default severity: 5.
# Not enforced by cPLint.
severity = 3

# Magic variables should be assigned as "local".
[Variables::RequireLocalizedPunctuationVars]
# Default severity: 4.
# Enforced by cPlint
severity = 4
allow = $0 %ENV

# Negative array index should be used.
[Variables::RequireNegativeIndices]
# Default severity: 4.
# Enforced by cPlint
severity = 4

